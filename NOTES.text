•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
>npm init

-package.json is configuration for npm 
-The most imp package in our project is bundler
-HTML,CSS,JS whole code to be bundle which does webpack bundler and shift it to production.
- create-react-app uses webpack and babbel to build things up.
-we are going to use parcel package.
-There are two type of packages /dependency -
  1) Dev Dependency - used at the time of Development
  2) Normal Dependency - used at the time of Production

> npm install -D parcel

- We are using Dev dependency for now.

^(caret) - ^1.2.3 will update minor version ^1.2.6
           we should use caret at all 

~(tilde) -  ~1.2.3 will update major version ~2.2.3

- package.json : is configuration for npm
                 It keeps track of what version is installed on our system. keeps approx version

- package-lock.json : keeps track of all exact version of all the dependency.
                     keeps a hash that whatever is in my machine is the same thing deploy on production.

- node_modules :- fetch all the code of all the dependencies (parcel) in our system.
                - and our dependency (parcel) have many other dependency thats why node_module have parcel and many more packages. This is known as transitive dependency.
                - node_module is a collection of dependencies.

                - IF we have package.json and package-lock.json then we can recreate our node node_modules again(using npm install) . So we can keep it in gitignore.


 > npx parcel index.html

 npx - executing a package.

  > npm i react react-dom

parcel :
  Documentation : https://parceljs.org/
- Dev build
- Local Server
- HMR = Hot Module Replacement (autorefreshing page)
- File Watching Algorithm - written in C++
- caching - Faster Builds
- Image optimization
- Minification
- Bundling 
- Compress
- Consistant Hashing
- Code splitting
- Differential Bundling - support older browsers as well
- Error handling - (gives better error suggesions)
- HTTPs
- Tree shaking - remove unused code 
- Different dev and prod bundles

To make build :

> npx parcel build index.html

Error : Did you mean "App.html"? 
 Try changing the file extension of "main" in package.json.

 ErrorResolve : remove "main": "app.js" from package.json



 - npx parcel index.html will regenerate dist and parcel-catche i.e it can be regenerate so it will go in gitignore.

- If we want to make use / allow our app on older browsers then we can put  
 "browserslist":[
    "last 2 versions"
  ]
in our package.json , where browserslist is from node_modules
 - check it at https://browserslist.dev/


 //-------------Episode 3 :-----------------
 -Benifits of JSX
-Babel and parcel role in JSX
-Components
 -Composing Components


 - We can write scripts in package.json to start and build our project like ( "start" : "parcel index.html",
    "build" : "parcel build index.html") 
    - and now we are no more longer using >npx parcel index.html we will use >npm run start  to run project 

- >npm run start == >npm start are same
- >npm run start behind the seens execute the package parcel with the index.html bacause we have configured this inside our package.json

- JSX :
 JSX is Javascript syntax which is easier to create react elements.

 Babel - converts all JSX code into React.createElement

**HOMEWORK - explore diff attribute in JSX

Extensions - prettier,bracket pair colorizer, Eslint,Better Comments 

- Functional Componant :
 Is a function that return some pieace of JSX code.

-Componant Composition :
 Component inside Component
 Composing two component in one another 


 What is JSX ?
 -> It is Javascript syntax which is easier to create react elements.

 SuperPower of JSX
 -> We can use javascript in JSX using {}  (curly brackets)
 -> We can use element and function in jsx using js

 {TitleComponent()} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX
 -> This all are same i.e calling function in another component and component within component


//-----Episode-04  Talk is cheap , show me the code--------------------------------------
/*
* Header
*  -Logo
*  -Nav Items
*Body
*  -Search
*  -RestaurantContainer
*    -RestaurantCard
*Footer
*  -Copyright
*  -Links
*  -Address
*  -Contact
*/

props :
 -properties are something we can pass to the component
 -passing prop to a component is passing arguments to a function.

 Destructuring props :
  - const {resName,cuisine} = props;

  const RestroCard = (props)=>{
    const {resName,cuisine} = props;
    return(
      <div>
      <h3>{resName}</h3>
      <h3>{cuisine}</h3>
      </div>
    );
  }

  JSON viewer - Is a crome extension , Json will looks good.

- Config Driven UI :
  -Website is Driven by config (JSON Data).
  -Data is Different for different Location.
  -UI will change as backend data change.
 Ex : 
 Swiggy have Diff UI and Diff Restaurant For Diff Location.The cards are different.

Array join JS -
 join is property to join array.

optional chaining :
 ex : const {name,avgRating} = resData?.data;
 
 Warning : Each child in a list should have a unique "key" prop.
->- When we are looping any List you have to give a key. Where we have to pass unique id.
  - ex: If their is a new card added , react dont know where to put that card so it will rerender all the 15 cards, it will treat all restro card as same .
  But if we give id , react will know that exact card , will render one restro card.
  - So use unique key at all when you use List or map function.
  - Dont use index as a key , this isnt recommanded. use it as last resort. 

//---------------------------------Episode-05 - Lets get Hooked--------------------------------------------

Two Types of Export / Import :-

 - Default Export / Import

   export default component;
   import Componant from "path";

 - Named Export / Import :
  
  export const Componant;
  import {Componant} from "path";
  
  #React Hooks :
   -useState() - SuperPowerful state variable in react
   -useEffect()-

whenever state variable updates/changes react rerender the component.

  React Algorithm :
   React uses Reconciliation algorithm (React Fiber) :
   ITs new way to find 
    
   Virtual DOM : It is a representation of actual DOM .

 Diff Algorithm :
   

  //-------------Episode-06 : Explore the world------------------------------

• What is Monolith architecture?
=> In older days , we used to have single big an application where API , UI , Auth ,DB ,SMS, Notifications , JSP (Java servlet pages) in the same project. If we have to make a single change (ex. change a button) , we have to deploy whole project .that was monolith architecture.

• Microservice Architecture :
In Microservice Architecture we have diff services for different job like BE , UI , Auth , DB , SMS , Email Notifications these are services which are Microservices.
All teh sevices combine together forms a big App.
-So here we have difference project for different job . Which is SEPARATION OF CONCERN.
-The tools and languages used in a project depend on usecase.
-We can have different tech stack for different things.
- All services run on diff port but same domain name.

- How Web Apps/UI fetch the data from backend:
1] App Loads => API Call(500 milisecond) => Render
  - As soon as our page loads wait for API and render the UI.

2] Loades => render UI => API call => Update teh UI
  -page loads we will quickly render UI , now we will make API call  and after getting result from API  We will render it Again. Which is good for better UX. 

•useEffect Hook -
 -Hook : Hook is just normal JS function which react gives us for specific purpose.
 - We get this from react library.
 - useEffect is a function , we call this function by passing another function in it , which is callback function.
 - useEffect(callback function , dependency array)

*H.W :  Optional chaining (Watch it into Namaste JS)

Optional chaining :
- The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.

What is a shimmer UI?
- A shimmer UI is a version of the UI that doesn't contain actual content, but instead mimics the layout and shapes of the content that will eventually appear.


// ---------------Episode 6.1 - Swiggy API Issue Resolved--------------------------

-JSON viewer - crome extension
- install Json viewer to see the API data in json format to understand.
- One more error in console of CORS - Toggle On to the CORS plugin(solved)
-Error :TypeError: Cannot read properties of undefined (reading 'map')
=> key={restaurant.info.id}

- Error :TypeError: Cannot destructure property 'cloudinaryImageId' of '(intermediate value)' as it is undefined.
=>changed data to info in RestaurantCard.js component
 (  resData?.info;)

//-----------------Episode 6.2 CORS Plugin Issue solved-----------------------------------

- Go to corsproxy.io website copy https://corsproxy.io/?
add this before url , now you dont have to use CORS plugin.

Swiggy API URL = https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING 

but above solution didnt worked for me cause website showing you are blocked so I have used :
 - Go to corsproxy.org URL , Paste Swiggy API, and CORS Proxy will create a URL for You.Need to fetch the provided API Instead of Swiggy API.



• What is a Microservices ?
• What is Monolith architecture?
• What is the difference between Monolith and Microservice?
• Why do we need a useEffect Hook?
• What is Optional Chaining?
• What is Shimmer UI?
• What is the difference between JS expression and JS statement
• What is Conditional Rendering, explain with a code example
• What is CORS?
• What is async and await ?
• What is the use of 'const json = await data.json();' in getRestaurants()

//---------------Episode 07 ------------------------------------------
useEffect Hook:

//If no dependency array => useEffect is called on every render
//If dependency array is empty = [] => useEffect is called on initial render(just once)
//If dependency array is [btnNameReact] => called everytime btnNameReact is updated.

useState Hook :
- It is used for creating local state variable inside your component.
- Never use useState inside if else condition.


- Install React Router DOM library(check version in package.json)
> npm install react-router-dom

- create routing configuration and adding it to root.render in App.js

* useRouteError Hook - To show more information about the error in the error page .
 -import this in Error.js
 -import {useRouteError} from "react-router-dom"
 -{useRouteError} is a hook which dont allow that red-colour error to come in console.It catch all routing Error and we can show those error to the user.

 - A SuperPower given us by react router DOM is Link component.
 -It just changes the Components.

 # Two types of routing in web Apps
 -Client Side Routing:
   -Dynamically update content of SPA in response to change in URL.
   - Dont do full page reload.
  
 -Server side Routing:
   -All our pages come from server.
   -Make a network call , get the HTML , CSS , JS and loads the whole page.

- Dynamic Routing :
   Process of rendering components in response to a change in the application's URL.

   -If the route to restaurant menu page is like
   {
    path:"/restaurant/:id"   (id is dynamic , it element:<RestMenu/>      can be anything)
   }

- To read the "id" passed in URL, 'react-router-dom' provides us useParams Hook.

import {useParams} from react-router-dom

const RestaurantMenu = () =>{
  const params = useParams();
const {id} = params;
return (
//.....
);
}

-Using Swiggy API to make RestaurantMenu page:
since now we are rendering data from API, we know that the data will be fetched only after the initial
rendering. But during that initial render, the component will not get access to our API data and the data will be
shown as undefined. To overcome that, we will do Optional rendering :- render the Shimmer if API data is not
fetched, else render the RestaurantMenu component.

- we have taken the API for one random restaurant from Swiggy. How about taking using each restaurant’s data
from the restaurants we are showing in our home page. To do, we will call the API dynamically i.e. using that specific
restaurant’s ID in the RestaurantMenu.js and we will also provide Link tag to each Restaurant Card in Body.js.
   //ERROR : 
   // -TypeError: Cannot destructure property 'name' of '(intermediate value)' as it is undefined.
   // ANS : Removed ternary Operater

//---------Episode-08 Lets get Classy-------------------------------
Class Based Components:
-It was less maintainable, have more code and little messy.
-Class component are no longer used.
-Developers can do almost everything using functional components now.
-Functional component, at the EOD is just normal JS function.
-Similarly, Class based components are just normal JS class.

- Class Based Component :

import React from "react";
class Profile extends React.component{
  render(){
    return <h1> Profile </h1>
  }
}
export default Profile;

- Functional Component:
const Profile =()=>{
  return(
    <h1> Profile </h1>
  )
}

- React.component come from react, to tell react that this is class component not normal js class
-we can't create javascript component without render method.

- Props in class Components :
  - In About.js suppose we called class component "ProfileClass.js" and pass props inside it like-
 <Profile class name={"Rutuja"} />
  - So in class component we have "this keyword". So in "ProfileClass.js"
     <h2>Name : {this.props.name}</h2>
     
    - Even if There are many props, we can use props like this:
    - <ProfileClass name={"Rutuja"} xyz={a,b,c} />
    -<h2>Name : {this.props.name} </h2>
     <h2>xyz : {this.props.xyz} </h2>

     State in class Component :
    class UserClass extends React.Component{
    constructor(props){
        super(props);

     this.state = {
        count: 0,
        count2: 2,
     };
    }}

    -constructor function is called only once,when the component is first created and initialized, making it an ideal place to set the initial state of the component using 
     this.state ={..} 
     - Super(props) is necessary because it passes the received props to the constructor of the base component class , allowing the component access its properties.
  - whenever we load a class , constructor is called.
  - To use the state we created :

  render(){
    return (
      <h2>count: {this.state.count}</h2>
      <h2>count2: {this.state.count2}</h2>
    );
  };


React Lifecycle :
-First constructor is called 
-Then component is rendered

-React component lifecycle refers to the series of methods that get executed at different stages of a components exicuted at different stagesof a components existence in React application.
  The lifecycle methods can be divided into 3 phases:
  1) Mounting phase
  2)Updating phase
  3)Unmounting phase

  Mounting Phase:
  - These methods are called when an instance of a component is being created and inserted into the DOM:
     -constructor()
     -static get Derived State from props()
     -render
     -componentDidMount() -> This method is called immediately after the first render of a component.It is executed only once during the lifecycle of a component.
      -Best place to make API call in class Components -
        => componentDidMount(){..}
        - This is because during mounting phase.
        1)constructor() -> is called
    then2)render() -> is called
    atlast,3)componentDidMount() ->is called

    Eg: 
      Class Apidatafetchexample extends React,component{
        state = {data:[],loading:true,error:null};
        componentDidMount(){
          this.fetchData();
        }
        fetchData=()=>{
          fetch("https://api.example/data")
          .then(response=>response.json())
          .then(data=>this.setState({data,loading:false}));
          catch(error => this.setState({error,loading:false}));
        };
      }


*----About.js------
import User from "./User";
import UserClass from "./UserClass";
import { Component } from "react";

class About extends Component{
    constructor(props){
        super(props);

        console.log("Parent Constructor");
    }
    componentDidMount(){
        console.log("Parent Component Did Mount");
    }
    
    render(){
        console.log("Parent Render");
        return(
           <div>
            <h1>About Class Component</h1>
            <h2>This is Namaste React Web series</h2>
            <UserClass name={"First"} location={"Dehradun Class"}/>
            <UserClass name={"Second"} location={"US"}/>
           </div> 
        );
    }
}

export default About;


*-----UserClass.js-----

import React from "react";

class UserClass extends React.Component{
    constructor(props){
        super(props);
        console.log("Child Constructor");

     this.state = {
        count: 0,
        count2: 2,
     };
    }

    componentDidMount(){
        console.log("Child Component Did Mount");
        //API call
    }
    render(){
        const {name , location} = this.props;
        const {count, count2} = this.state;

        console.log("Child Render");

        return(
            <div className="user-card">
            <h1>Count : {count}</h1>
            <button
            onClick={()=>{
            //NEVER UPDATE STATE VARIABLES DIRECTLY
            this.setState({
                count:this.state.count + 1,
                count2:this.state.count2 + 1,

            });
            }}
            >
                Count Increase
            </button>
            <h2>Name:{name}</h2>
            <h3>Location:{location}</h3>
            <h4>Contact:@rutuchandgude</h4>
            </div>
        );
    }
}
export default UserClass;
/----------------

- In above eg,
<About/> is the Parent component.
<Profile/> is the child component of <Above/>
- If <About/> component have 2 children :
  First child & Second child.

 - In what order the above code will execute?


-Parent Constructor
-Parent render
  -First Constructor
  -First Render

  -Second Constructor
  -Second Render
 <DOM UPDATED - IN SINGLE BATCH>
  -First componentDidMount  
  -Second componentDidMount

-Parent componentDidMount

- In React Life Cycle Diagram :
  - React completes the render phase of every child and after that move to commit phase.
  (Suppose after first child render , If I call first child componentDidMount it will make an api call and my second child will stay there. So, react will both render phase of first & second child.)

React do rendering in 2 phases:
 1)Render Phase
 2)Commit Phase

 First of all , react finishes the RENDER PHASE.

 Render Phase: -> is Fast
  - incluides constructor and render method.
  Commit Phase :
   ->Phase when react modifies the DOM.
   ->componentDidMount is called after the initial render has finished.
   ->Commit phase is slow.

   Making an API call :
   -Lets use github user api.
   -make an api call in the child component.

   -UserClass.js

   class UserClass extends React.component{
    constructor(props){
      super(props);
      this.state = {
        userInfo:{
          name:" ",
          location:" ",
        }
      };
    }
    console.log("child-constructor");
   }
   async componentDidMount(){
    const data = await fetch ("https://api.github.com/users/rutuchandgude");
    const json = await data.json();
    console.log(json);
    this.setState({
      userInfo:json,
    });
    console.log("Child-componentDidMount");
   }
   render(){
    console.log("child-render");
    return(
      <h1>Name : {this.state.userInfo.name}</h1>
      <img src={this.state.userInfo.avatar_url}/>
      <h2>Location: {this.state.userInfo.location}</h2>
    )
   }

   -Sequence of method called in above code:
     -I have parent "About.js" inside one child "UserClass.js"
     1)Parent-constructor
     2)Parent-render
     3)child-constructor
     4)child-render
     5)parent-componentDidMount (Is called before making API call.)

 - This is because , react finishes render cycle first and then it goes to commit cycle. As child-componentDidMount, will take some time for the data to load, Parent-componentDidMount is called before. So, hence this sequence.

   1)Parent-constructor
     2)Parent-render
     3)child-constructor
     4)child-render
     5)DOM is updated
     6)Json is logged in console
     7)Parent-componentDidMount
     8)Child-componentDidMount-  It is called before but is but is bean put into the wait cycle. Because we are using async.
     9)Child render

     - setState trigger next render. It will trigger Reconciliation process. So, the child will be rendered once again when we have the data.
     -This re-render cycle is known as "Updating"

     - componentDidMount is called after first render.
     -componentDidUpdate is called after every next render.
     -Before the component is unmounted from the DOM,
     componentWillUnmount will be called.

     -NOTE: Never compare React Lifecyclemethod with functional components
        - In modern react code , they removed the concepts of lifecycle method.

      - componentDidUpdate :
        - Is called after every subsequent render.
        - In functional component, we use dependency array in useEffect which indicates when useEffect should be called.

        Eg: useEffect(()=>{
          //API call
        },[count,count2]);

        This means that whenever the count and count2 gets updated, useEffect gets executed.

- Earlier , in class-based components,
  this is done like below : Which is hectic !

  componentDidUpdate(prevProps,prevState){
    if(
      this.state.count ! == prevState.count ||
      this.state.count2 ! == prevState.count2
    )
    {
      //code
    }
  } 

for Lifecycle Diagram :
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

------Mounting-------
-constructor(dummy)
-Render(dummy)
-<HTML Dummy>
-componentDidMount
  <API Call>
  <this.setState>

//--------------------Episode-09 - Optimizing Our App-------------------------------

CUSTOM HOOKS :
 -Why should we build hooks?
  -Reusability
  -Readability
  -Separation of concerns
  -Maintainability

  - Hooks are just normal javascript functions with extra power.
  -Functions are used to wrapup a logic and can reuse it anywhere we want to.
  Eg : In Body.js,
   FilterData() is a function written separately. We did'nt write it between the code because it breacks modularity, reusability & readability.
    If I need to use this function anywhere else then I can reuse it.

    - Great place to keep re-usable functions :
     -Make a folder utils (Its utility, helper or common or whatever name).
     -Inside create a file util.js
     -and write the function filterData() inside it and make it named export.
     ->Any no. of helper functions can be kept inside util.js.
     -> Advantage :
      -Functions become readable & reusable .
      -This makes our code more testable because we can write separate testcases for this.
      -Maintainable because its easy to debug.
      - Modularity means we've broken down code into small pieces. and every piece have its own responsibility.
 
 -Lets take <RestaurantMenu/> component.
  Job of this component is to show restaurant menu. 
  i)Find out restaurant Id (resId)
  ii)get details of the restaurant from server.
  iii)to display.

  We'll try to extract this logic.
  We will create a custom hook that will help us to get the restaurant details.
  [NOTE : While creating hook always start it  with "use" in front of it]

  * Create a custom hook useRestaurant .
   -> Create a new file named useRestaurantmenu.js:
   *import { useEffect,useState } from "react";
import { Menu_API } from "./constants";

const useRestaurantmenu = (resId) =>{
    const [resInfo, setResInfo] = useState(null);
 
  useEffect(()=>{
    fetchData();
  },[]);
  
  const fetchData = async () =>{
           const data = await fetch(Menu_API + resId);
        const json = await data.json();
        setResInfo(json.data);
   
  };
    return resInfo;
};

export default useRestaurantmenu;

=> Meanwhile in <RestaurantMenu/> :

import { useParams } from "react-router-dom";
import useRestaurantmenu from "../utils/useRestaurantMenu";

const RestaurantMenu = () => {
  const {resId } = useParams();
//   console.log(params);

const resInfo = useRestaurantmenu(resId);
  if (resInfo === null) return <Shimmer />;
  return(
    //.....
  );
};
export default RestaurantMenu;

-----
Next feature ->
 - Online & Offline
- If the user have no internet connection , then it should show "You are offline, check your internet connection."
-Else it should show the data.
-In Body.js ->

const Body =()=>{
  const isOnline = useOnline();
  if(! isOnline){
    return(
      <h1>Check your internet connectivity</h1>
    );
  }
}
 
 -Now , we can create custom hook useOnline() :
 -useOnline.js ->

  import {useState, useEffect} from "react";
  const useOnline = () =>{
    const [isOnline, setIsOnline] = useState(true);
    useEffect (()=>{
      window.addEventListener("online", ()=>{
        setIsOnline(true);
      });
      window.addEventListener("offline", ()=>{
        setIsOnline(false);
      });
    },[])
    return isOnline;
  }
  export default useOnline;

  - To show fake offline :
  - Go to crome devetools -> Network tab.
  -> No throttling -> Change speed option (fast, slow 3G ,offline)

  -Cleaning catche :
   - whenever eventListener is added , we should clean it up.
   - [whenever you are going offline & getting back online, eventListener is created. only once because we've empty dependency array].
   - It is always a good practice to clear the eventListener when we go out of the component . Otherwise browser will kept hold those.

   - to do that :->
   useEffect(()=>{
    const handleOnline =()=>{
      setIsOnline(true);
    };
   })

- useOnlineStatus.js ->

import { useEffect, useState } from "react";

const useOnlineStatus = () =>{
    
    const [onlineStatus, setOnlineStatus] = useState(true);

    //chack if online
    useEffect(()=>{
        window.addEventListener("offline", ()=>{
            setOnlineStatus(false);
        });

        window.addEventListener("online", ()=>{
            setOnlineStatus(true);
        })
    }, [])

    //boolean value
    return onlineStatus;
}

export default useOnlineStatus;

------
-For the whole code, parcel creates only one .js file. In this file , all the code is bundled together. So the size of this index.js file is large. But in production bundle, size of this file should be small.
-There would be a 100s of components in a large website like "makemytrip".
Suppose it all these are bundled together in a single index.js file , It will blast, It will make our app very slow.
- So, to build a large - scale production ready application , we should do:-
"CHUNKING"
- It is also called as ->
-Code splitting
-Dynamic bundling 
-Lazy loading
We cannot bundle everything in our app.

- On Demand Loading.
- Dynamic Import.

 - Making a new different bundle in our App
 -Let us create "Instamart"
 -create an instamart component.
 -In App.js file , do chunking :
 -App.js:

 Instead of importing like this :-
  - import Instamart from "./components/Instamart";
  - Do lazy loading :->
  - const Instamart = lazy (()=>
  import ("./components/Instamart"));
  - So now the "index.js" file in dist folder won't have code of instamart. It is created as separate file while loading.
  - This is called ON-DEMAND LOADING.

  "When you are loading your component in demand, react tries to separate it."
 
  - So, when instamart is loaded forthe first time, we see an error message on screen.
    This is because , instamart file took 27ms. to get loaded. But react tries to render it before it get loaded. That's why error.
  -> Solution for this :
   "Suspense" -> We can wrap instamart inside suspense.

   App.js :->
   {
    path : "/instamart",
    element : (
      <Suspense>
        <Instamart/>
      </Suspense>
    )
   }

   React now knows that when there is a suspense, what will be loaded.

   - In the intermediate time, a shimmer should be shown .
   - So there is a prop known as "fallback".
   -So , write:->
   <Suspense Fallback = {<Shimmer/>} >
   <Instamart />
   </Suspense>

   NOTE: Never ever dynamically load your component inside another component.

   /*
* Header
*  -Logo
*  -Nav Items
*Body
*  -Search
*  -RestaurantContainer
*    -RestaurantCard
*Footer
*  -Copyright
*  -Links
*  -Address
*  -Contact
*/

------------------------Episode-10 - Jo Dikhta hai wo Bikta hai--------------------------------
•
- CSS
- Sass - Syntactically Awesome Style Sheets (Writing CSS with more super powers.)
-BootStrap
-Material UI
-Styled Components
-Telwind CSS
-Ant-Design 
-Chakra UI 

- SCSS ANS SASS :
 - SASS : -Original and old syntax.
          - File save with .sass extention
          - Syntax is similar to Ruby.
          - Use of semicolon; bracket {} is strictly prohibitted, otherwise error occurred.
          - Strict Indentation.

 - SCSS : -New syntax File save with .scss extention
          - Syntax is similar to CSS
          - Use of semicolon; bracket {} is mandetory,
           otherwise error occurred .
           - No strict indended.

-SASS AND SCSS these are not use in industry production ready application .
- We use CSS library and frameworks.
           
-Telwind CSS :
(https://tailwindcss.com/docs/guides/parcel)
 We are using telwind CSS in our App.
 - Install Telwind CSS with Parcel Using above commands.

  > npm install -D tailwindcss postcss
  > npx telwindcss init

  -PostCSS - transform CSS inside Javascript.
  - npx telwindcss init : this command will generate telwind.config.js file. 
 
 -Configure PostCSS : 
  Create a .postcssrc file in your project root, and enable the tailwindcss plugin.
  -.postcssrc is used to understand what is written inside tailwind
  - To enable pest above code in .postcssrc file.
   
   {
  "plugins": {
    "tailwindcss": {}
  }
}

- Adding path to content:[] at 'tailwind.config.js' file .
- This is we can use our tailwind in these files which have above extension.
 
   "./src/**/*.{html,js,ts,jsx,tsx}",


- Remove everything in index.css file and write above three lines.

@tailwind base;
@tailwind components;
@tailwind utilities;

- Done with tailwindcss configuration in our project.

- tailwind basically offers you a classname for every css that you want to put in your app.

----------
-Install one extension for telwind - Tailwind CSS IntelliSense
- Which will give suggesions as in when we are writting code.

- We can also modify tailwind classes by using square brackets [] & can make dynamic classes as well.
eg : w-[250px]

- Pros and cons :
Advantages :
- offering faster development to us.
Disadvantages :
-It become lengthy and ugly.
- It comes with initial learning.

-When parcel will make the bundle of css , it will only incluid the css that is required on webpage. 